import sys

import bson.objectid

import config.global_configuration as global_conf
import database.client
import runners.train_runner as train_runner


def main(*args):
    """
    Train a given system system with a given data source as a training set
    This represents a basic task.
    Scripts to run this will be autogenerated by the job system
    The first argument is the system trainer ID, the remaining arguments are ids of image sources to train with
    :return: 
    """
    if len(args) >= 2:
        system_trainer_id = bson.objectid.ObjectId(args[0])
        image_source_ids = []
        for i in range(1, len(args)):
            image_source_ids.append(bson.ObjectId(args[i]))

        config = global_conf.load_global_config('config.yml')
        db_client = database.client.DatabaseClient(config=config)

        s_system_trainer = db_client.system_trainers_collection.find_one({'_id': system_trainer_id})
        system_trainer = db_client.deserialize_entity(s_system_trainer)

        s_image_sources = db_client.image_source_collection.find({'_id': {'$in': image_source_ids}})
        image_sources = [db_client.deserialize_entity(s_image_source) for s_image_source in s_image_sources]

        trained_system = train_runner.train_system_with_sources(system_trainer, image_sources)
        db_client.system_collection.insert(trained_system.serialize())


if __name__ == '__main__':
    main(*sys.argv[1:])
